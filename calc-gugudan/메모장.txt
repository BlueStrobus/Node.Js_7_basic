이 코드는 `eval()` 없이 사칙연산을 계산하는 `calculator` 함수를 구현한 것입니다. 하나씩 자세히 설명드릴게요.

### 코드 개요
1. 사용자가 입력한 계산식(`expression`)을 사칙연산(`+`, `-`, `*`, `/`)과 피연산자로 나눕니다.
2. **연산자 우선순위**에 따라 곱셈과 나눗셈을 먼저 계산하고, 이후 덧셈과 뺄셈을 계산하여 최종 결과를 반환합니다.

### 단계별 설명

#### 1. 토큰화 (문자열을 숫자와 연산자로 나눔)
```javascript
const tokens = expression.match(/\d+|\+|\-|\*|\//g);
if (!tokens) return null; // 잘못된 입력일 경우
```
- `expression.match(/\d+|\+|\-|\*|\//g);`는 입력 문자열을 숫자와 연산자로 분리합니다.
  - `\d+`: 숫자 하나 이상 (예: `5`, `23` 등)
  - `\+`, `\-`, `\*`, `\/`: 각각의 연산자(+, -, *, /)를 뜻합니다.
- 예를 들어, `5 + 3 * 2`라는 문자열을 입력하면 `tokens` 배열은 `["5", "+", "3", "*", "2"]`가 됩니다.

#### 2. 연산자 우선순위 처리: 곱셈(`*`)과 나눗셈(`/`) 먼저 계산
```javascript
const stack = [];
let currentOp = null;

for (let token of tokens) {
  if (!isNaN(token)) {
    const num = parseInt(token);
    if (currentOp) {
      const last = stack.pop();
      if (currentOp === "*") stack.push(last * num);
      else if (currentOp === "/") stack.push(last / num);
      currentOp = null;
    } else {
      stack.push(num);
    }
  } else {
    if (token === "*" || token === "/") {
      currentOp = token;
    } else {
      stack.push(token);
    }
  }
}
```
- `stack`: 숫자와 연산자를 저장해두는 공간입니다.
- `currentOp`: 현재의 연산자(`*` 또는 `/`)를 임시로 저장하는 변수입니다.

**작동 방식**
1. `tokens` 배열을 하나씩 읽으며, 숫자인지 연산자인지 구분합니다.
2. 숫자일 때:
   - `currentOp`가 존재하면(`*` 또는 `/`), `stack`에서 마지막 숫자를 꺼내(`last`), `currentOp`에 따라 곱하거나 나누어 `stack`에 다시 넣습니다.
   - `currentOp`가 없다면 그냥 `stack`에 숫자를 추가합니다.
3. 연산자일 때:
   - 연산자가 `*` 또는 `/`이면 `currentOp`에 저장해 다음 숫자와 계산할 준비를 합니다.
   - 연산자가 `+` 또는 `-`이면 `stack`에 그대로 추가해, 나중에 계산할 수 있게 합니다.

#### 3. 덧셈과 뺄셈 계산
```javascript
let result = stack.shift();
while (stack.length > 0) {
  const operator = stack.shift();
  const nextNum = stack.shift();
  if (operator === "+") result += nextNum;
  else if (operator === "-") result -= nextNum;
}
```
- 곱셈과 나눗셈 계산이 끝난 후 남은 숫자와 연산자들은 `stack`에 저장되어 있습니다.
- `stack`에서 첫 번째 값을 `result`에 넣고, 남은 덧셈(`+`)과 뺄셈(`-`) 연산을 순서대로 계산합니다.
- `stack.shift()`를 통해 `stack`의 앞에서부터 하나씩 값을 가져와 연산을 수행합니다.

### 전체 예시
예를 들어 `5 + 3 * 2`를 입력하면:
1. 토큰화: `["5", "+", "3", "*", "2"]`
2. 곱셈과 나눗셈 계산: `stack`은 `[5, "+", 6]`가 됩니다.
3. 덧셈과 뺄셈 계산: `result = 5 + 6 = 11`

따라서, `calculator("5 + 3 * 2")`를 호출하면 결과 `11`이 반환됩니다.